#! /usr/bin/env python3
# -*- coding: utf-8 -*-
"""LEGO Universe News! Minifig Wizard.

Created 2013-2014 Triangle717 & rioforce
<http://Triangle717.WordPress.com/>
<http://rioforce.WordPress.com/>

Licensed under The MIT License
<http://opensource.org/licenses/MIT>

"""

from __future__ import print_function
import os
import sys

# Support Python 2 and 3 input
# Default to Python 3's input()
get_input = input

# If this is Python 2, use raw_input()
if sys.version_info[:2] <= (2, 7):
    get_input = raw_input

# Store the final file lists for writing
thumbList = []
imageList = []

# All folders images are stored in
imageFols = ["hats", "heads", "legs", "torsos", "shield", "sword"]

# All valid XML tag names
tagNames = ["Hat", "Head", "Leg", "Torso", "Shield", "Sword"]

# Location of output XML file
xmlPath = os.path.join("..", "..", "img", "images.xml")

# Special images to remove optional item
noImageXML = ["<thumb>img/Clear-Selection.png</thumb>",
              "<image>img/spark/empty.png</image>"]


for folder in imageFols:
    # Go through every subfolder in `img`
    for root, dirnames, filenames in os.walk(
            os.path.join("..", "..", "img", "{0}".format(folder))):

        # Get each file in the list
        for files in filenames:
            bodyType = root.split(os.path.sep)
            myFile = os.path.join(root, files)

            # Split each folder into the proper sections
            if bodyType[2] == "hats":
                tagName = tagNames[0]
            elif bodyType[2] == "heads":
                tagName = tagNames[1]
            elif bodyType[2] == "legs":
                tagName = tagNames[2]
            elif bodyType[2] == "torsos":
                tagName = tagNames[3]
            elif bodyType[2] == "shield":
                tagName = tagNames[4]
            elif bodyType[2] == "sword":
                tagName = tagNames[5]

            # The Web uses forward slashes
            # (unlike Windows but like Mac OS X and Linux...)
            if os.path.sep in myFile:
                myFile = myFile.replace(os.path.sep, "/")

            # Remove the `../` generated by the script being
            # one folder level lower than the images
            myFile = myFile[3:]

            # Construct entry for thumbnail
            if bodyType[4] == "thumb":
                subTagName = "thumb>"
                thumbList.append("<{0}{1}</{0}".format(
                    subTagName, myFile[3:]))

            # Construct entry for full-size image
            else:
                subTagName = "image>"
                imageList.append("<{0}{1}</{0}".format(
                    subTagName, myFile[3:]))

# There were no images to make an XML
if len(thumbList) == 0:
    print("""Could not find any images! Ensure there are images at\n
{0}""".format(os.path.abspath(os.path.dirname(xmlPath))))

    # Abort only on user input
    print("\nAn XML file has not been generated.")
    get_input("\nPress Enter to close.")
    raise SystemExit(0)


# Each part is accessed by it's index
# Since each list (should be) the same length,
# we only need the length of one of them.
thumbListLen = len(thumbList)

# There is not the same number of thumbnails as images
if thumbListLen != len(imageList):

    # There are more thumbnails than images
    if thumbListLen > len(imageList):
        print("""A thumbnail does not have a corresponding full size image.
Double check all "thumb" and "full" folders and fix this error before
continuing.""")

    # There are more images than thumbnails
    else:
        print("""A full size image does not have a corresponding thumbnail.
Double check all "thumb" and "full" folders and fix this error before
continuing.""")

    # Abort only on user input
    print("\nAn XML file has not been generated.")
    get_input("\nPress Enter to close.")
    raise SystemExit(0)


# Begin the file contents
with open(xmlPath, "wt") as f:
    f.write("""<?xml version="1.0" encoding="UTF-8"?>
<Minifigure>""")


# Write Clear Selection image for Hats and Items
for dividingPart in (tagNames[0], tagNames[4], tagNames[5]):
    with open(xmlPath, "at") as f:
        f.write("\n\t<{0}>".format(dividingPart))
        f.write("\n\t\t{0}".format(noImageXML[0]))
        f.write("\n\t\t{0}".format(noImageXML[1]))
        f.write("\n\t</{0}>".format(dividingPart))


for listIndex in thumbList:
    # Create the proper XML divider
    selector = listIndex.split("/")
    if selector[1] == "hats":
        divide = tagNames[0]
    elif selector[1] == "heads":
        divide = tagNames[1]
    elif selector[1] == "legs":
        divide = tagNames[2]
    elif selector[1] == "torsos":
        divide = tagNames[3]
    elif selector[1] == "shield":
        divide = tagNames[4]
    elif selector[1] == "sword":
        divide = tagNames[5]

    # Write our XML document
    with open(xmlPath, "at") as f:
        f.write("\n\t<{0}>".format(divide))
        f.write("\n\t\t{0}".format(listIndex))
        f.write("\n\t\t{0}".format(imageList[thumbList.index(listIndex)]))
        f.write("\n\t</{0}>".format(divide))


# Finish off the file
with open(xmlPath, "at") as f:
    f.write("\n</Minifigure>\n")

# Delete now unneeded lists
del selector[:]
del bodyType[:]

# Success!
print("""A new XML file has been successfully generated and saved to\n
{0}""".format(os.path.abspath(xmlPath)))
get_input("\nPress Enter to close.")
raise SystemExit(0)
